<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/25/hello-world/"/>
    <url>/2024/07/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>快速排序算法</title>
    <link href="/2024/07/24/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2024/07/24/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>本篇文章将会详细介绍一下本人所学习的快排算法（会和常规的快排不太一样）。</strong></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先介绍一下快速排序算法</p><p>快速排序是由东尼·霍尔所发展的一种基于分治策略的排序算法。</p><p>快速排序的整体流程如图所示。</p><ol><li>首先，选取一个数字作为哨兵，对原数组执行一次“哨兵划分”，得到未排序的左子数组和右子数组。</li><li>然后，对左子数组和右子数组分别递归执行“哨兵划分”。</li><li>持续递归，直至子数组长度为 1 时终止，从而完成整个数组的排序。</li></ol><p><img src="/2024/07/24/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort_overview.png" alt="quick_sort_overview"></p><p>哨兵划分就是将一个数组中的元素划分为两块</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>，<span class="hljs-number">0</span>，<span class="hljs-number">2</span>，<span class="hljs-number">4</span>，<span class="hljs-number">3</span>，<span class="hljs-number">5</span><br><span class="hljs-attribute">2</span>左边是小于<span class="hljs-number">2</span>的数字，<span class="hljs-number">2</span>右边是大于等于<span class="hljs-number">2</span>的数字<br></code></pre></td></tr></table></figure><p>我们都知道快排的平均复杂度是O(nlogn)，最差时间复杂度O(n²)，那么什么时候快排时间复杂度是最差呢，我们看下面一种</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">原始数组：<span class="hljs-number">1，2，3，4</span>，<span class="hljs-number">5</span><br>第一次划分后：<span class="hljs-number">1，2，3，4</span>  | <span class="hljs-number">5</span><br>假设每次选取的哨兵都是最右边的数字，那么按照快排算法的迭代，每次都只能划分出来一个元素，这样相当于退化成一个链表每次只取一个元素<br>这种情况的时间复杂度是O(n²)<br></code></pre></td></tr></table></figure><h3 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h3><p>如何优化呢，我们发现导致这种情况的出现是哨兵的选取，尽可能不要让它取到数组的边界，因此我们采取的方法是随机选取数组中的元素，尽量选取到一个中间元素，每次划分将数组拆分成长度相同的两半，这样就能尽可能减少上面情况的出现</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">原始数组：<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span><br>选取 <span class="hljs-number">3</span><br>第一次拆分得到：<span class="hljs-number">1</span>，<span class="hljs-number">2</span> | <span class="hljs-type">3</span> | <span class="hljs-type">4</span>，<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h3><p>另外，这里还有一个可以优化的地方</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">原始数组：<span class="hljs-number">2，4，1，2</span>，<span class="hljs-number">0，3，2，5</span><br>选取<span class="hljs-number">2</span>作为哨兵<br>第一次划分后得到<span class="hljs-number">1</span>，<span class="hljs-number">0</span>|  <span class="hljs-number">2</span>  |<span class="hljs-number">2，2，4，3</span>，<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>我们发现如果数组中选取的哨兵在数组中有多个重复元素时，按照常规的快排，右边依然要把与哨兵相等的元素再进行划分一次，下一次右边是对2，2，4，3，5进行划分，，相当于每次快排只筛选出了一个元素，既然我们已经知道了2是哨兵，存在重复元素，就可以将右边划分的范围缩小成下面这个样子，相当于每次划分可以筛选出多个元素，中间的就不用再考虑了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>，<span class="hljs-number">0</span>|  <span class="hljs-number">2</span>，<span class="hljs-number">2</span>，<span class="hljs-number">2</span>  | <span class="hljs-number">4</span>，<span class="hljs-number">3</span>，<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>这样每一次划分就可以提升效率，其中具体的做法是在划分中不只确定左边界，还确定右边界</p><p>下面展示代码（java版）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> quickSort1(<span class="hljs-type">int</span>[] arr) &#123;<br>       <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length &lt; <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       process(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> process(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R) &#123;<br>       <span class="hljs-keyword">if</span> (L &gt;= R) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       swap(arr, L + (<span class="hljs-type">int</span>) (Math.random() * (R - L + <span class="hljs-number">1</span>)), R);<br>       <span class="hljs-type">int</span>[] equalArea = netherlandsFlag(arr, L, R);<br>       process(arr, L, equalArea[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>);<br>       process(arr, equalArea[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, R);<br>   &#125;<br><br>// 划分其实是一个荷兰国旗问题<br>   <span class="hljs-built_in">public</span> static <span class="hljs-type">int</span>[] netherlandsFlag(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R) &#123;<br>       <span class="hljs-keyword">if</span> (L &gt; R) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (L == R) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;L, R&#125;;<br>       &#125;<br>       <span class="hljs-type">int</span> less = L - <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> more = R;<br>       <span class="hljs-type">int</span> <span class="hljs-keyword">index</span> = L;<br>       // 左右边界一起确定<br>       <span class="hljs-keyword">while</span> (<span class="hljs-keyword">index</span> &lt; more) &#123;<br>           <span class="hljs-keyword">if</span> (arr[<span class="hljs-keyword">index</span>] == arr[R]) &#123;<br>               <span class="hljs-keyword">index</span>++;<br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[<span class="hljs-keyword">index</span>] &lt; arr[R]) &#123;<br>               swap(arr, <span class="hljs-keyword">index</span>++, ++less);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               swap(arr, <span class="hljs-keyword">index</span>, <span class="hljs-comment">--more);</span><br>           &#125;<br>       &#125;<br>       swap(arr, more, R);<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;less + <span class="hljs-number">1</span>, more&#125;;<br>   &#125;<br>   <br>   <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> swap(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>       <span class="hljs-type">int</span> tem = arr[a];<br>       arr[a] = arr[b];<br>       arr[b] = tem;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法章节</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序算法</title>
    <link href="/2024/07/20/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2024/07/20/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>本篇文章将会详细介绍一下本人所学习的快排算法（包括递归和非递归的实现）。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法章节</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
